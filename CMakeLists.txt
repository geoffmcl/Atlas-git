# CMakeLists.txt, generated by am2cmake.pl, on 2020/05/14 19:40:52
# Beginning with Makefile.am,
# processed 18 'am' files, 263 lines, for 12 libs & 3 exes.
cmake_minimum_required( VERSION 3.6 )

# CMakeScripts or use the ones that come by default with CMake.
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules) # ${CMAKE_MODULE_PATH})

# For top of CMakeLists.txt file
############################################################
include (CheckFunctionExists)
include (CheckIncludeFile)
include (CheckSymbolExists)
############################################################

project( atlas )

if(COMMAND cmake_policy)
       cmake_policy(SET CMP0074 NEW)
endif()

# The version number.
set( temp_MAJOR 0 )
set( temp_MINOR 6 )
set( temp_POINT 0 )

# Allow developer to select is Dynamic or static library built
set( LIB_TYPE STATIC )  # set default static
option( BUILD_SHARED_LIB "Set ON to build shared Library (DLL)" OFF )

if(CMAKE_COMPILER_IS_GNUCXX)
    set( WARNING_FLAGS -Wall )
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang") 
   set( WARNING_FLAGS "-Wall -Wno-overloaded-virtual" )
endif() 

if(WIN32 AND MSVC)
    # turn off various warnings - none needed in this compile
    set(WARNING_FLAGS "${WARNING_FLAGS} /wd4996")
    # foreach(warning 4251 4275 4290 4786 4305)
    foreach(warning 4005 4244 4267 4805)
         set(WARNING_FLAGS "${WARNING_FLAGS} /wd${warning}")
    endforeach()
    # other flags -DNOMINMAX -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS
    set( MSVC_FLAGS "-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS" )
    # if (${MSVC_VERSION} EQUAL 1600)
    #    set( MSVC_LD_FLAGS "/FORCE:MULTIPLE" )
    # endif (${MSVC_VERSION} EQUAL 1600)
    set( NOMINMAX 1 )
    # to distinguish between debug and release libs
    set( CMAKE_DEBUG_POSTFIX "d" )
    # maybe + secur32.lib
    list(APPEND add_LIBS opengl32.lib glu32.lib winmm.lib)
    # it seems this creates BIGGER problems in the Release build
    # set(MSVC_LD_FLAGS "${MSVC_LD_FLAGS} /NODEFAULTLIB:MSVCRT")
    # maybe just 
    set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${MSVC_LD_FLAGS_DEBUG}" )
else()
    # items for unix
endif()

set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}" )

# TODO: need a way to set this externally, rather tha hardcoded
add_definitions( -DFGBASE_DIR="D:/FG/next/fgdata" )

#  GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.
#  GLUT_LIBRARIES, the libraries to link against
#  GLUT_FOUND, If false, do not try to use GLUT.
find_package(GLUT)
if(GLUT_FOUND)
    message(STATUS "*** Found GLUT, inc '${GLUT_INCLUDE_DIR}', lib '${GLUT_LIBRARIES}'")
    include_directories( ${GLUT_INCLUDE_DIR} )
    list(APPEND add_LIBS ${GLUT_LIBRARIES} )
else()
    message( FATAL_ERROR "*** Can NOT find GLUT")
endif()

# PLIB_LIBRARIES
# PLIB_FOUND, if false, do not try to link to PLIB
# PLIB_INCLUDE_DIR, where to find the headers
# PLIB_VERSION_STR
#find_package(PLIB)
find_package(PLIB COMPONENTS pui sg fnt puaux ul)
if(PLIB_FOUND)
    message(STATUS "*** Found PLIB, ver '${PLIB_VERSION_STR}', inc '${PLIB_INCLUDE_DIR}'")
    message(STATUS "*** PLIB libs: '${PLIB_LIBRARIES}'")
    include_directories( ${PLIB_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${PLIB_LIBRARIES} )
else()
    message( FATAL_ERROR "*** Can NOT find PLIB")
endif()


# GLEW_INCLUDE_DIRS   include directories for GLEW
# GLEW_LIBRARIES   libraries to link against GLEW
# GLEW_SHARED_LIBRARIES   libraries to link against shared GLEW
# GLEW_STATIC_LIBRARIES   libraries to link against static GLEW
# GLEW_FOUND   true if GLEW has been found and can be used
# GLEW_VERSION   GLEW version
find_package(GLEW)
if(GLEW_FOUND)
    message(STATUS "*** Found GLEW ver ${GLEW_VERSION}, inc '${GLEW_INCLUDE_DIRS}', lib '${GLEW_LIBRARIES}'")
    include_directories( ${GLEW_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${GLEW_LIBRARIES} )
else()
    message( FATAL_ERROR "*** Can NOT find GLEW")
endif()

#  ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.
#  ZLIB_LIBRARIES      - List of libraries when using zlib.
#  ZLIB_FOUND          - True if zlib found.
find_package(ZLIB)
if(ZLIB_FOUND)
    message(STATUS "*** Found ZLIB inc '${ZLIB_INCLUDE_DIRS}', lib '${ZLIB_LIBRARIES}'")
    include_directories( ${ZLIB_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${ZLIB_LIBRARIES} )
else()
    message( FATAL_ERROR "*** Can NOT find ZLIB")
endif()

# JPEG_FOUND   If false, do not try to use JPEG.
# JPEG_INCLUDE_DIRS   where to find jpeglib.h, etc.
# JPEG_LIBRARIES   the libraries needed to use JPEG.
# JPEG_VERSION   the version of the JPEG library found
find_package(JPEG)
if(JPEG_FOUND)
    message(STATUS "*** Found JPEG ver '${JPEG_VERSION}', inc '${JPEG_INCLUDE_DIRS}', lib '${JPEG_LIBRARIES}'")
    include_directories( ${JPEG_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${JPEG_LIBRARIES} )
else()
    message( FATAL_ERROR "*** Can NOT find JPEG")
endif()

# PNG_INCLUDE_DIRS   where to find png.h, etc.
# PNG_LIBRARIES   the libraries to link against to use PNG.
# PNG_DEFINITIONS   You should add_definitions(${PNG_DEFINITIONS}) before compiling code  that includes png library files.
# PNG_FOUND   If false, do not try to use PNG.
# PNG_VERSION_STRING   the version of the PNG library found (since CMake 2.8.8)
find_package(PNG)
if(PNG_FOUND)
    message(STATUS "*** Found PNG ver '${PNG_VERSION_STRING}', inc '${PNG_INCLUDE_DIRS}', lib '${PNG_LIBRARIES}'")
    include_directories( ${PNG_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${PNG_LIBRARIES} )
    if(PNG_DEFINITIONS)
        add_definitions(${PNG_DEFINITIONS})
        message(STATUS "*** PNG add_definitions(${PNG_DEFINITIONS})")
    endif()
else()
    message( FATAL_ERROR "*** Can NOT find PNG")
endif()

# CURL_FOUND   "True" if ``curl`` found.
# CURL_INCLUDE_DIRS   where to find ``curl``/``curl.h``, etc.
# CURL_LIBRARIES   List of libraries when using ``curl``.
# CURL_VERSION_STRING   The version of ``curl`` found.
set(CURL_NO_CURL_CMAKE 1)
find_package(CURL)
if(CURL_FOUND)
    message(STATUS "*** Found PNG ver '${CURL_VERSION_STRING}', inc '${CURL_INCLUDE_DIRS}', lib '${CURL_LIBRARIES}'")
    include_directories( ${CUR_INCLUDE_DIRS} )
    list(APPEND add_LIBS ${CURL_LIBRARIES} )
    if(MSVC)
        add_definitions( -DCURL_STATICLIB=1 )
        list(APPEND add_LIBS Ws2_32 crypt32 Wldap32)
    endif()
else()
    message( WARNING "*** Can NOT find CURL! GetMap can NOT be built")
endif()

find_package(Boost)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    message(STATUS "*** Boost found inc ${Boost_INCLUDE_DIRS}")
else()
    message(FATAL_ERROR "*** Boost NOT found! Set BOOST_ROOT in env.")
endif()

# find_package(OpenGL)
add_definitions( -DFREEGLUT_LIB_PRAGMAS=0 )

############################################################
# for configuration section of CMakeLists.txt
# 27 check_include_file items
check_include_file(arpa/inet.h HAVE_ARPA_INET_H)
check_include_file(dlfcn.h HAVE_DLFCN_H)
check_include_file(fcntl.h HAVE_FCNTL_H)
check_include_file(getopt.h HAVE_GETOPT_H)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(limits.h HAVE_LIMITS_H)
check_include_file(malloc.h HAVE_MALLOC_H)
check_include_file(memory.h HAVE_MEMORY_H)
check_include_file(netdb.h HAVE_NETDB_H)
check_include_file(netinet/in.h HAVE_NETINET_IN_H)
check_include_file(stddef.h HAVE_STDDEF_H)
check_include_file(stdint.h HAVE_STDINT_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
check_include_file(string.h HAVE_STRING_H)
check_include_file(strings.h HAVE_STRINGS_H)
check_include_file(sys/param.h HAVE_SYS_PARAM_H)
check_include_file(sys/select.h HAVE_SYS_SELECT_H)
check_include_file(sys/socket.h HAVE_SYS_SOCKET_H)
check_include_file(sys/stat.h HAVE_SYS_STAT_H)
check_include_file(sys/time.h HAVE_SYS_TIME_H)
check_include_file(sys/timeb.h HAVE_SYS_TIMEB_H)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(termios.h HAVE_TERMIOS_H)
check_include_file(unistd.h HAVE_UNISTD_H)
check_include_file(values.h HAVE_VALUES_H)
check_include_file(windows.h HAVE_WINDOWS_H)
# check_symbol_exists( _Bool 'MISSED_HDR' HAVE__BOOL ) # *** FIX ME ***
# 44 check_function_exists items
check_function_exists(alarm HAVE_ALARM)
check_function_exists(atexit HAVE_ATEXIT)
check_function_exists(clock_gettime HAVE_CLOCK_GETTIME)
check_function_exists(strerror_r HAVE_DECL_STRERROR_R)
check_function_exists(tzname HAVE_DECL_TZNAME)
check_function_exists(floor HAVE_FLOOR)
check_function_exists(ftime HAVE_FTIME)
check_function_exists(gethostbyname HAVE_GETHOSTBYNAME)
check_function_exists(gethostname HAVE_GETHOSTNAME)
check_function_exists(gettimeofday HAVE_GETTIMEOFDAY)
check_function_exists(inet_ntoa HAVE_INET_NTOA)
check_function_exists(malloc HAVE_MALLOC)
check_function_exists(memmove HAVE_MEMMOVE)
check_function_exists(memset HAVE_MEMSET)
check_function_exists(mkdir HAVE_MKDIR)
check_function_exists(pow HAVE_POW)
check_function_exists(realpath HAVE_REALPATH)
check_function_exists(rint HAVE_RINT)
check_function_exists(select HAVE_SELECT)
check_function_exists(socket HAVE_SOCKET)
check_function_exists(sqrt HAVE_SQRT)
check_function_exists(strdup HAVE_STRDUP)
check_function_exists(strerror HAVE_STRERROR)
check_function_exists(strerror_r HAVE_STRERROR_R)
check_function_exists(strftime HAVE_STRFTIME)
check_function_exists(strstr HAVE_STRSTR)
check_function_exists(strtoul HAVE_STRTOUL)
check_function_exists(bcopy HAVE_BCOPY)
check_function_exists(drand48 HAVE_DRAND48)
check_function_exists(fabsl HAVE_FABSL)
check_function_exists(getitimer HAVE_GETITIMER)
check_function_exists(GetLocalTime HAVE_GETLOCALTIME)
check_function_exists(getrusage HAVE_GETRUSAGE)
check_function_exists(memcpy HAVE_MEMCPY)
check_function_exists(mkfifo HAVE_MKFIFO)
check_function_exists(mktime HAVE_MKTIME)
check_function_exists(rand HAVE_RAND)
check_function_exists(random HAVE_RANDOM)
check_function_exists(setitimer HAVE_SETITIMER)
check_function_exists(signal HAVE_SIGNAL)
check_function_exists(timegm HAVE_TIMEGM)
check_function_exists(truncf HAVE_TRUNCF)
check_function_exists(vprintf HAVE_VPRINTF)

##########################################
# configuration file, if needed
# configure_file( ${CMAKE_SOURCE_DIR}/config.h.cmake ${CMAKE_BINARY_DIR}/config.h )
# atlas config.h
configure_file( config.h.cmake ${CMAKE_BINARY_DIR}/config.h )
# simgear simgear_config.h
configure_file( slimgear/simgear/simgear_config.h.cmake ${CMAKE_BINARY_DIR}/simgear_config.h )
# another simgear version.h
set( VERSION "3.0" ) # arb. value
configure_file( slimgear/simgear/version.h.in ${CMAKE_BINARY_DIR}/version.h )
############################################
include_directories( ${CMAKE_BINARY_DIR} )
add_definitions( -DHAVE_CONFIG_H )
############################################

if(BUILD_SHARED_LIB)
   set(LIB_TYPE SHARED)
   message(STATUS "*** Building DLL library ${LIB_TYPE}")
else()
   message(STATUS "*** Option BUILD_SHARED_LIB is OFF ${LIB_TYPE}")
endif()

include_directories( slimgear )
include_directories( slimgear/simgear )
include_directories( slimgear/simgear/bucket )
include_directories( slimgear/simgear/debug )
include_directories( slimgear/simgear/io )
include_directories( slimgear/simgear/magvar )
include_directories( slimgear/simgear/math )
include_directories( slimgear/simgear/misc )
include_directories( slimgear/simgear/package )
include_directories( slimgear/simgear/serial )
include_directories( slimgear/simgear/structure )
include_directories( slimgear/simgear/threads )
include_directories( slimgear/simgear/timing )

#################################################
##### LIBRARIES 12 #####
#################################################
######################################################################################
# Project [win_ulib], type [Static Library], 5 C/C++, 6 Hdrs, 0 Other, 4 INCS, 0 DEFS
# maybe ${dir}/MapEXT.cxx ${dir}/sg_ext_funcs.cxx ${dir}/MapEXT.hxx ${dir}/sg_ext_funcs.hxx
if (MSVC)
    set(name win_utils)
    set(dir projects/msvc/winsrc)
    # lib of functions missing in windows
    set (${name}_SRCS
        ${dir}/asprintf.cxx
        ${dir}/getopt.c
        ${dir}/strsep.cxx
        ${dir}/win_utils.cxx )
    set (${name}HDRS
        ${dir}/asprintf.h
        ${dir}/getopt.h
        ${dir}/strsep.h
        ${dir}/win_utils.h 
        ${dir}/win_versions.h )
    add_library ( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
    include_directories( "${dir}" )
    list(APPEND add_LIBS ${name})
#else ()
    # maybe should add a find for this???
#    list(APPEND EXTRA_LIBS pthread)
endif ()

# from: .\slimgear\simgear\Makefile.am

# from: .\slimgear/simgear\bucket\Makefile.am
set(name sgbucket)
set(dir slimgear/simgear/bucket)
set( ${name}_SRCS
    ${dir}/newbucket.cxx
    )
set( ${name}_HDRS
    ${dir}/newbucket.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\debug\Makefile.am
set(name sgdebug)
set(dir slimgear/simgear/debug)
set( ${name}_SRCS
    ${dir}/logstream.cxx
    )
set( ${name}_HDRS
    ${dir}/debug_types.h
    ${dir}/logstream.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\io\Makefile.am
set(name sgio)
set(dir slimgear/simgear/io)
set( ${name}_SRCS
    ${dir}/iochannel.cxx
    ${dir}/lowlevel.cxx
    ${dir}/raw_socket.cxx
    ${dir}/sg_binobj.cxx
    ${dir}/sg_file.cxx
    ${dir}/sg_serial.cxx
    ${dir}/sg_socket.cxx
    ${dir}/sg_socket_udp.cxx
    )
set( ${name}_HDRS
    ${dir}/iochannel.hxx
    ${dir}/lowlevel.hxx
    ${dir}/raw_socket.hxx
    ${dir}/sg_binobj.hxx
    ${dir}/sg_file.hxx
    ${dir}/sg_serial.hxx
    ${dir}/sg_socket.hxx
    ${dir}/sg_socket_udp.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\magvar\Makefile.am
set(name sgmagvar)
set(dir slimgear/simgear/magvar)
set( ${name}_SRCS
    ${dir}/coremag.cxx
    ${dir}/magvar.cxx
    )
set( ${name}_HDRS
    ${dir}/coremag.hxx
    ${dir}/magvar.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\math\Makefile.am
set(name sgmath)
set(dir slimgear/simgear/math)
set( ${name}_SRCS
    ${dir}/SGGeodesy.cxx
    ${dir}/sg_random.c
    )
set( ${name}_HDRS
    ${dir}/SGBox.hxx
    ${dir}/SGCMath.hxx
    ${dir}/SGGeoc.hxx
    ${dir}/SGGeod.hxx
    ${dir}/SGGeodesy.hxx
    ${dir}/SGGeometry.hxx
    ${dir}/SGGeometryFwd.hxx
    ${dir}/SGIntersect.hxx
    ${dir}/SGLimits.hxx
    ${dir}/SGLineSegment.hxx
    ${dir}/SGLocation.hxx
    ${dir}/SGMath.hxx
    ${dir}/SGMathFwd.hxx
    ${dir}/SGMatrix.hxx
    ${dir}/SGMisc.hxx
    ${dir}/SGPlane.hxx
    ${dir}/SGQuat.hxx
    ${dir}/SGRay.hxx
    ${dir}/SGSphere.hxx
    ${dir}/SGTriangle.hxx
    ${dir}/SGVec2.hxx
    ${dir}/SGVec3.hxx
    ${dir}/SGVec4.hxx
    ${dir}/sg_geodesy.hxx
    ${dir}/sg_random.h
    ${dir}/sg_types.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\misc\Makefile.am
set(name sgmisc)
set(dir slimgear/simgear/misc)
set( ${name}_SRCS
    ${dir}/sg_hash.cxx
    ${dir}/sg_path.cxx
    ${dir}/sgstream.cxx
    ${dir}/strutils.cxx
    ${dir}/zfstream.cxx
    )
set( ${name}_HDRS
    ${dir}/sg_hash.hxx
    ${dir}/sg_path.hxx
    ${dir}/sgstream.hxx
    ${dir}/stdint.hxx
    ${dir}/strutils.hxx
    ${dir}/zfstream.hxx
    )
if (APPLE)
    list(APPEND _SRCS ${dir}/CocoaHelpers.mm )
endif()
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\package\Makefile.am
set(name sgpackage)
set(dir slimgear/simgear/package)
set( ${name}_SRCS
    ${dir}/md5.c
    )
set( ${name}_HDRS
    ${dir}/md5.h
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\serial\Makefile.am
set(name sgserial)
set(dir slimgear/simgear/serial)
set( ${name}_SRCS
    ${dir}/serial.cxx
    )
set( ${name}_HDRS
    ${dir}/serial.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\structure\Makefile.am
set(name sgstructure)
set(dir slimgear/simgear/structure)
set( ${name}_SRCS
    ${dir}/exception.cxx
    )
set( ${name}_HDRS
    ${dir}/exception.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\threads\Makefile.am
set(name sgthreads)
set(dir slimgear/simgear/threads)
set( ${name}_SRCS
    ${dir}/SGThread.cxx
    )
set( ${name}_HDRS
    ${dir}/SGGuard.hxx
    ${dir}/SGQueue.hxx
    ${dir}/SGThread.hxx
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)


# from: .\slimgear/simgear\timing\Makefile.am
set(name sgtiming)
set(dir slimgear/simgear/timing)
set( ${name}_SRCS
    ${dir}/lowleveltime.cxx
    ${dir}/sg_time.cxx
    ${dir}/timestamp.cxx
    ${dir}/timezone.cxx
    )
set( ${name}_HDRS
    ${dir}/lowleveltime.h
    ${dir}/sg_time.hxx
    ${dir}/timestamp.hxx
    ${dir}/timezone.h
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
#list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)

set(name slimgear)
set(dir slimgear/simgear)
set( ${name}_SRCS
    )
set( ${name}_HDRS
    ${dir}/compiler.h
    ${dir}/constants.h
    ${dir}/sg_inlines.h
    ${CMAKE_BINARY_DIR}/version.h
    )
list(APPEND SG_SRCS ${${name}_SRCS} ${${name}_HDRS} )
add_library( ${name} ${LIB_TYPE} ${SG_SRCS} )
#add_library( ${name} ${LIB_TYPE} ${${name}_SRCS} ${${name}_HDRS} )
list(APPEND add_LIBS ${name})
# deal with install, if any...
#install( TARGETS ${name}
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib )
#install(FILES ${${name}_HDRS} DESTINATION include)

#################################################
##### EXECUTABLES 3 #####
#################################################

# from: .\src\Makefile.am
set(name Atlas)
set(dir src)
set( ${name}_SRCS
    ${dir}/Notifications.cxx
    ${dir}/Notifications.hxx
    ${dir}/Atlas.cxx
    ${dir}/GLUTWindow.cxx
    ${dir}/GLUTWindow.hxx
    ${dir}/AtlasBaseWindow.cxx
    ${dir}/AtlasBaseWindow.hxx
    ${dir}/AtlasWindow.cxx
    ${dir}/AtlasWindow.hxx
    ${dir}/AtlasController.cxx
    ${dir}/AtlasController.hxx
    ${dir}/FlightTrack.hxx
    ${dir}/FlightTrack.cxx
    ${dir}/Image.cxx
    ${dir}/Image.hxx
    ${dir}/NavData.cxx
    ${dir}/NavData.hxx
    ${dir}/Overlays.cxx
    ${dir}/Overlays.hxx
    ${dir}/AirportsOverlay.hxx
    ${dir}/AirportsOverlay.cxx
    ${dir}/AirwaysOverlay.hxx
    ${dir}/AirwaysOverlay.cxx
    ${dir}/NavaidsOverlay.hxx
    ${dir}/NavaidsOverlay.cxx
    ${dir}/FlightTracksOverlay.hxx
    ${dir}/FlightTracksOverlay.cxx
    ${dir}/CrosshairsOverlay.hxx
    ${dir}/CrosshairsOverlay.cxx
    ${dir}/RangeRingsOverlay.hxx
    ${dir}/RangeRingsOverlay.cxx
    ${dir}/Tiles.cxx
    ${dir}/Tiles.hxx
    ${dir}/tiles.h
    ${dir}/TileMapper.cxx
    ${dir}/TileMapper.hxx
    ${dir}/Searcher.cxx
    ${dir}/Searcher.hxx
    ${dir}/Search.cxx
    ${dir}/Search.hxx
    ${dir}/Preferences.cxx
    ${dir}/Preferences.hxx
    ${dir}/Graphs.cxx
    ${dir}/Graphs.hxx
    ${dir}/Culler.cxx
    ${dir}/Culler.hxx
    ${dir}/Scenery.cxx
    ${dir}/Scenery.hxx
    ${dir}/Background.cxx
    ${dir}/Background.hxx
    ${dir}/Cache.cxx
    ${dir}/Cache.hxx
    ${dir}/LayoutManager.cxx
    ${dir}/LayoutManager.hxx
    ${dir}/Bucket.cxx
    ${dir}/Bucket.hxx
    ${dir}/Subbucket.cxx
    ${dir}/Subbucket.hxx
    ${dir}/Palette.cxx
    ${dir}/Palette.hxx
    ${dir}/misc.cxx
    ${dir}/misc.hxx
    ${dir}/Globals.cxx
    ${dir}/Globals.hxx
    ${dir}/Geographics.cxx
    ${dir}/Geographics.hxx
    ${dir}/OOGL.cxx
    ${dir}/OOGL.hxx
    )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
     target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
     set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )


# from: .\src\Makefile.am
set(name Map)
set(dir src)
set( ${name}_SRCS
    ${dir}/Map.cxx
    ${dir}/Tiles.cxx
    ${dir}/Tiles.hxx
    ${dir}/TileMapper.cxx
    ${dir}/TileMapper.hxx
    ${dir}/Bucket.cxx
    ${dir}/Bucket.hxx
    ${dir}/Subbucket.cxx
    ${dir}/Subbucket.hxx
    ${dir}/Palette.cxx
    ${dir}/Palette.hxx
    ${dir}/Image.cxx
    ${dir}/Image.hxx
    ${dir}/misc.cxx
    ${dir}/misc.hxx
    )
add_executable( ${name} ${${name}_SRCS})
if(add_LIBS)
     target_link_libraries( ${name} ${add_LIBS} )
endif ()
if (MSVC)
     set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
endif ()
#install( TARGETS ${name} DESTINATION bin )


if(CURL_FOUND)
    # from: .\src\Makefile.am
    set(name GetMap)
    set(dir src)
    set( ${name}_SRCS
        ${dir}/GetMap.cxx
        )
    add_executable( ${name} ${${name}_SRCS})
    if(add_LIBS)
         target_link_libraries( ${name} ${add_LIBS} )
    endif ()
    if (MSVC)
         set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )
    endif ()
    #install( TARGETS ${name} DESTINATION bin )
endif()

# eof
